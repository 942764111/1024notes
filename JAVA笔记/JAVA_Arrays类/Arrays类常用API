package oo.day04;
import java.util.*;
public class ArraysDemo {
 String DemoName = "binarySearch_2"; 	
 public ArraysDemo(){
	 switch (DemoName) {
	case "fill":
		 fill();
		break;
	case "fill_2":
		fill_2();
		break;
	case "sort":
		sort();
		break;
	case "copyOf":
		copyOf();
		break;
	case "copyOfRange":
		copyOfRange();
		break;
	case "binarySearch":
		binarySearch();
		break;
	case "binarySearch_2":
		binarySearch_2();
		break;
	default:
		break;
	}

 }
 //替换填充数组元素
 /**
  * 1、
  *public static void fill(int[] a,int value) 
  * a:要进行元素替换的数组
  * value:要存粗数组中所有算素
  * */
 void fill(){
	 int arr[] = new int[5];
	 Arrays.fill(arr, 2);
	 for (int i : arr) {
		System.out.println(i);
	}
 }
 
 //通过索引第一个和最后一个数组下标，替换填充数组元素
 /**
  * 2、
  * public static void fill(int[] a, int fromIndex, int toIndex,  value) 
  * a:要进行元素替换的数组
  * fromIndex:要使用指定值填充的第一个元素的索引（包括）
  *  toIndex:要使用指定值填充的最后一个元素的索引（不包括）
  *  value:要存在数组中所有所有元素的值
  * */
 void fill_2(){
	 int arr[] = new int[5];
	 Arrays.fill(arr, 1, 3, 8);
	 for (int i : arr) {
		System.out.println(i);
	}
 }
 
 //数组排序 (升序)
 /**
  * 3、
  * public static void sort(int[] a)
  * int[]:要排序的数组
  * */
 void sort(){
	 int arr[] = new int[5];
	 Arrays.fill(arr, 1, 3, 8);
	 Arrays.sort(arr);
	 for (int i : arr) {
		System.out.println(i);
	}
 }
 
 //复制数组:自定义数组长度
 /**
  * 4、
  * public static int[] copyOf(int[] original, int newLength)
  * original:要复制的数组
  * newLength:要复制的数组的长度
  * */
 void copyOf(){
	 int arr[] = new int[5];
	 int arr2[] =  Arrays.copyOf(arr,arr.length+5);
	 for (int i : arr2) {
		System.out.println(i);
	}
 }
 
 //复制数组:自定义数组元素下标开始和结束
 /**
  * 5、
  * public static int[] copyOfRange(int[] original, int from, int to)
  * original:要复制的数组
  * from:指定开始复制数组的索引位置(包括)
  * to:指定结束复制数组的索引位置(不包括)
  * */
 void copyOfRange(){
	 int[] arr = new int[]{2,5,6,7};
	 int arr2[] =  Arrays.copyOfRange(arr,1,4);
	 for (int i : arr2) {
		System.out.println(i);
	}
 }
 
 //查找数组元素的索引
 /**
  * 6、
  * public static int binarySearch(Object[] a, long key)
  * Arrays类的 binarySearch()
  * 方法可使用二分搜索法来搜索指定数组，
   * 以获得指定对象
   * 
  * a:要搜索的数组
  * kay:要搜索的元素 (如果key包含在数组中，则返回搜索值的索引;否则返回-1或 "-")
  * */
 void binarySearch(){
	 int[] arr = new int[]{2,5,6,7};
	 int key =  Arrays.binarySearch(arr,6);
	 System.out.println(key);
 }
 
 //在指定范围内查找数组元素的索引
 /**
  * 7、
  * public static int binarySearch(int[] a, int fromIndex, int toIndex,
                                   int key)
  * Arrays类的 binarySearch()
  * 方法可使用二分搜索法来搜索指定数组，
   * 以获得指定对象
   * 
  * a:要搜索的数组
  * fromIndex:指定范围开始处索引（包含）
  * toIndex:指定范围结束处索引（不包含）
  * key:要搜索的元素 (如果key包含在数组中，则返回搜索值的索引;否则key若大于取值范围为内的数返回-（-取值范围的长度）若小于返回-1)
  * */
 void binarySearch_2(){
	 int[] arr = new int[]{3,5,6,7};
	 int key =  Arrays.binarySearch(arr,0,3,0);
	 System.out.println(key);
 }
 
}

